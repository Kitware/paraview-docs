paraview.simple.TensorGlyph
===========================

.. currentmodule:: paraview.simple

.. autofunction:: TensorGlyph

Data Descriptors
----------------


   
   ColorGlyphs
       This property determines whether or not to color the glyphs.
   
   Colorby
       This property determines whether input scalars or computed eigenvalues at the point should be used
       to color the glyphs. If ThreeGlyphs is set and the eigenvalues are chosen for coloring then each glyph
       is colored by the corresponding eigenvalue and if not set the color corresponding to the largest
       eigenvalue is chosen.
   
   ExtractEigenvalues
       Toggle whether to extract eigenvalues from tensor. If false, eigenvalues/eigenvectors are not extracted and
       the columns of the tensor are taken as the eigenvectors (the norm of column, always positive, is the eigenvalue).
       If true, the glyph is scaled and oriented according to eigenvalues and eigenvectors; additionally, eigenvalues
       are provided as new data array.
   
   GlyphType
       This property determines which type of glyph will be placed at the points in the input dataset.
   
   Input
       This property specifies the input to the Glyph filter.
   
   LimitScalingByEigenvalues
       This property determines whether scaling of glyphs by ScaleFactor times eigenvalue should be limited.
       This is useful to prevent uncontrolled scaling near singularities.
   
   MaxScaleFactor
       If scaling by eigenvalues should be limited, this value sets an upper limit for scale factor times
       eigenvalue.
   
   Scalars
       This property indicates the name of the scalar array to use for coloring
   
   ScaleFactor
       This property specifies the scale factor to scale every glyph by.
   
   Symmetric
       This property determines whether or not to draw a mirror of each glyph.
   
   Tensors
       This property indicates the name of the tensor array on which to operate. The indicated array's
       eigenvalues and eigenvectors are used for scaling and orienting the glyphs.
   
   ThreeGlyphs
       Toggle whether to produce three glyphs, each of which oriented along an eigenvector and scaled according
       to the corresponding eigenvector.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`