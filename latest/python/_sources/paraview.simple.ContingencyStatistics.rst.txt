paraview.simple.ContingencyStatistics
=====================================

.. currentmodule:: paraview.simple

.. autofunction:: ContingencyStatistics

Data Descriptors
----------------


   
   AttributeMode
       Specify which type of field data the arrays will be
       drawn from.
   
   Input
       The input to the filter. Arrays from this dataset will
       be used for computing statistics and/or assessed by a statistical
       model.
   
   ModelInput
       A previously-calculated model with which to assess a
       separate dataset. This input is optional.
   
   Task
       Specify the task to be performed: modeling and/or
       assessment. <ol> <li> "Detailed model of input data,"
       creates a set of output tables containing a calculated statistical
       model of the <b>entire</b> input dataset;</li>
       <li> "Model a subset of the data," creates an output table (or
       tables) summarizing a <b>randomly-chosen subset</b> of the
       input dataset;</li> <li> "Assess the data with a model,"
       adds attributes to the first input dataset using a model provided on
       the second input port; and</li> <li> "Model and assess the
       same data," is really just operations 2 and 3 above applied to the same
       input dataset. The model is first trained using a fraction of the input
       data and then the entire dataset is assessed using that
       model.</li> </ol> When the task includes creating a model
       (i.e., tasks 2, and 4), you may adjust the fraction of the input
       dataset used for training. You should avoid using a large fraction of
       the input data for training as you will then not be able to detect
       overfitting. The <i>Training fraction</i> setting will be
       ignored for tasks 1 and 3.
   
   TrainingFraction
       Specify the fraction of values from the input dataset to
       be used for model fitting. The exact set of values is chosen at random
       from the dataset.
   
   VariablesofInterest
       Choose arrays whose entries will be used to form
       observations for statistical analysis.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`