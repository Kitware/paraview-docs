paraview.simple.Clip
====================

.. currentmodule:: paraview.simple

.. autofunction:: Clip

Data Descriptors
----------------


   
   ClipType
       This property specifies the parameters of the clip
       function (an implicit description) used to clip the dataset.
   
   Crinkleclip
       This parameter controls whether to extract entire cells
       in the given region or clip those cells so all of the output will stay
       only on that side of region.
   
   Exact
       If this property is set to 1 it will clip to the exact specifications
       for the \*\*Box\*\* option only, otherwise the clip will only approximate the box geometry. The
       exact clip is very expensive as it requires generating 6 plane clips. Additionally,
       \*\*Invert\*\* must be checked and \*\*Crinkle clip\*\* must be unchecked.
   
   HyperTreeGridClipper
       This property specifies the parameters of the clip
       function (an implicit description) used to clip the hyper tree grid.
   
   Input
       This property specifies the dataset on which the Clip
       filter will operate.
   
   Invert
       Invert which part of the geometry is clipped.
   
   Scalars
       If clipping with scalars, this property specifies the
       name of the scalar array on which to perform the clip
       operation.
   
   UseValueAsOffset
       If UseValueAsOffset is true, Value is used as an offset
       parameter to the implicit function. Otherwise, Value is used only when
       clipping using a scalar array.
   
   Value
       If clipping with scalars, this property sets the scalar
       value about which to clip the dataset based on the scalar array chosen.
       (See SelectInputScalars.) If clipping with a clip function, this
       property specifies an offset from the clip function to use in the
       clipping operation. Neither functionality is currently available in
       ParaView's user interface.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`