paraview.simple.ANLHaloFinder
=============================

.. currentmodule:: paraview.simple

.. autofunction:: ANLHaloFinder

Data Descriptors
----------------


   
   AlphaFactor
       A tuning parameter of subhalo finding.  This controls how aggressively small
       suhalos will be grown.  Alpha factor of 1.0 is the least agrressive.
       Only used if subhalo finding is enabled.
   
   BetaFactor
       A tuning parameter of subhalo finding.  This controls how saddle points between
       subhalos are treated.  Larger values allow identification of smaller scale
       structures such as tails.  Only used if subhalo finding is enabled.
   
   Boxsize
       The box side length used to wrap particles around if they exceed rL
       (or less than 0) in any dimension (only positive positions are allowed
       in the input, or they are wrapped around).
   
   CenterFindingMethod
       Set the method used to determine the halo "center".
   
   Deut
       Sets the Deut parameter of the center finding algorithms.  This
       parameter comes from the simulation input and is not needed if
       Center Finding Method is set to None.
   
   DistanceConversionFactor
       Some input files may have the world coordinates scaled from what the
       halo finder expects.  This parameter is the conversion factor that
       will be multiplied by the positions of all particles.
   
   FOFparticlethreshold
       Minimum number of particles (threshold) needed before a group is called
       a friends-of-friends (FOF) halo.
   
   FindSubhalos
       Turn this on to also find subhalos in halos of sufficient size. See
       the advanced parameters to set subhalo finder options.
   
   Hubble
       Sets the Hubble parameter of the center finding algorithms.  This
       parameter comes from the simulation input and is not needed if
       Center Finding Method is set to None.
   
   Input
       This property specifies the input of the filter.
   
   Linkinglength
       Linking length measured in units of interparticle spacing and is
       dimensionless.  Used to link particles into halos for the
       friends-of-friends (FOF) algorithm.
   
   MassConversionFactor
       For some inputs the particle mass may need to be converted before the
       halo finder can be run.  This is the number that is multiplied by the
       particle mass.
   
   MinimumSubhaloSize
       A subhalo candidate must have at least this many particles to be a subhalo.
   
   Minimumsizeforsuhalofinding
       The miminum sized halo to run the subhalo finder of to subdivide further.  Only used
       if subhalo finding is enabled.
   
   NMin
       The minimum number of close neighbors for a halo candidate to include a particle.
       If this many particles in the halo are close enough to the particle, then the
       particle is considered inside the halo.
   
   NumberofNeighbors
       The nearest X particles will be used to determine the local density in
       the subhalo finder where X is the value of this parameter.  Only used
       if subhalo finding is enabled.
   
   OmegaDM
       Sets the OmegaDM parameter of the center finding algorithms.  This
       parameter comes from the simulation input and is not needed if
       Center Finding Method is set to None.
   
   OmegaNU
       Sets the OmegaNU parameter of the center finding algorithms.  This
       parameter comes from the simulation input and is not needed if
       Center Finding Method is set to None.
   
   Overlap
       The space (in rL units) to extend processor particle ownership for ghost
       particles/cells.  Needed for correct halo calculation when halos cross
       processor boundaries in parallel computation.  Called DeadSize in the
       hacc config files.
   
   ParticleMass
       The mass of each particle.
   
   RedShift
       Sets the Redshift parameter of the center finding algorithms.  This
       parameter comes from the simulation input and is not needed if
       Center Finding Method is set to None.
   
   SPHNeighbors
       A parameter of the subhalo finder.  Only used if subhalo finding is enabled.
   
   Seedparticles
       Number of seeded particles in one dimension.  Therefore, total simulation
       particles is np^3 (cubed).
   
   SmoothingLength
       Sets the smoothing length used by some of the center finding
       techniques.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`