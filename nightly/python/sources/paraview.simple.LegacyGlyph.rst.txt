paraview.simple.LegacyGlyph
===========================

.. currentmodule:: paraview.simple

.. autofunction:: LegacyGlyph

Data Descriptors
----------------


   
   GlyphTransform
       The values in this property allow you to specify the
       transform (translation, rotation, and scaling) to apply to the glyph
       source.
   
   GlyphType
       This property determines which type of glyph will be
       placed at the points in the input dataset.
   
   Input
       This property specifies the input to the Glyph filter.
       This is the dataset to which the glyphs will be
       applied.
   
   KeepRandomPoints
       If the value of this property is 1 and RandomMode is
       1, then the randomly chosen points to glyph are saved and reused for
       other timesteps. This is only useful if the coordinates are the same
       and in the same order between timesteps.
   
   MaskPoints
       If the value of this property is set to 1, limit the
       maximum number of glyphs to the value indicated by
       MaximumNumberOfPoints. (See the MaximumNumberOfPoints
       property.)
   
   MaximumNumberofPoints
       The value of this property specifies the maximum number
       of glyphs that should appear in the output dataset if the value of the
       UseMaskPoints property is 1. (See the UseMaskPoints
       property.)
   
   Orient
       If this property is set to 1, the glyphs will be
       oriented based on the selected vector array.
   
   RandomMode
       If the value of this property is 1, then the points to
       glyph are chosen randomly. Otherwise the point ids chosen are evenly
       spaced.
   
   Scalars
       This property indicates the name of the scalar array on
       which to operate. The indicated array may be used for scaling the
       glyphs. (See the SetScaleMode property.)
   
   ScaleMode
       The value of this property specifies how/if the glyphs
       should be scaled based on the point-centered scalars/vectors in the
       input dataset.
   
   SetScaleFactor
       The value of this property will be used as a multiplier
       for scaling the glyphs before adding them to the
       output.
   
   Vectors
       This property indicates the name of the vector array on
       which to operate. The indicated array may be used for scaling and/or
       orienting the glyphs. (See the SetScaleMode and SetOrient
       properties.)
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`