paraview.simple.TableFFT
========================

.. currentmodule:: paraview.simple

.. autofunction:: TableFFT

Data Descriptors
----------------


   
   BlockOverlap
       Specify the number of samples which will overlap between each block / segment. If value is not in a valid range (ie inferior to 0 or superior to BlockSize) then the value BlockSize / 2 will be used. Only used if UseWelchMethod is true.
   
   BlockSize
       Specify the number of samples to use for each block / segment in the Welch method. This should be a power of 2 in order to achieve better performance.
   
   CreateFrequencyColumn
       Specify if the filter should create a frequency column based on a column named "time" (not case sensitive). An evenly-spaced time array is expected.
   
   DefaultSampleRate
       If the "Time" column is not found then this value will be used as the sample rate of the input.
   
   Detrend
       Remove trend on each segment before applying the FFT. This is a constant detrend where the mean of the signal is substracted to the signal. Only used if UseWelchMethod is true.
   
   Input
       This property specifies the input to the filter.
   
   Normalize
       Specify if the output should be normalized. Only used if UseWelchMethod is false.
   
   OneSidedSpectrum
       Specify if the filter should use the optimized discrete fourier transform for real values. This will cause output columns to have from n to ((n / 2) + 1) rows.
   
   ScalingMethod
       Set what scaling should be used when applying the Welch method.
   
   UseWelchMethod
       Specify if filter should use the Welch / periodogram method. If true the input will be split in multiple segment to compute an average fft across all segments / blocks. This can be faster for input with lots of samples and also remove some noise.
   
   WindowingFunction
       Specify the windowing function to apply on the input. This allows to better process data that is not periodic. When Welch method is used, the window is applied to each frame.
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`