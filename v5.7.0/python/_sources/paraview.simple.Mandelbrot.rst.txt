paraview.simple.Mandelbrot
==========================

.. currentmodule:: paraview.simple

.. autofunction:: Mandelbrot

Data Descriptors
----------------


   
   MaximumNumberofIterations
       The value of this property specifies the limit on
       computational iterations (i.e., the maximum number of iterations to
       perform to determine if the value will go above 2). Values less than
       2.0 after the specified number of iterations are considered in the
       fractal set.
   
   OriginCX
       The four values of this property indicate (in order) the
       components of C (real and imaginary) and the components of the initial
       value, X (real and imaginary).
   
   ProjectionAxes
       The three values in this property allow you to specify
       the projection from the 4D space used by the Mandelbrot set to the axes
       of the 3D volume. By default, the real component of C (represented by
       0) is mapped to the X axis; the imaginary component of C (represented
       by 1) is mapped to the Y axis; and the real component of X, the initial
       value (represented by 2) is mapped to the Z axis. The imaginary
       component of X is represented by 3. All values entered must be between
       0 and 3, inclusive.
   
   SizeCX
       The four values of this property indicate the length of
       the output in each of the four dimensions (the real and imaginary
       components of C and the real and imaginary components of X). The three
       dimensions specified in the Projection Axes property will determine
       which of these values specify the length of the axes in the
       output.
   
   SubsampleRate
       This property specifies the rate at which to subsample
       the volume. The extent of the dataset in each dimension will be divided
       by this value.
   
   WholeExtent
       The six values in the property indicate the X, Y, and Z
       extent of the output data. The first two numbers are the minimum and
       maximum X extent; the next two are the minimum and maximum Y extent;
       and the final two are the minimum and maximum Z extent. The numbers are
       inclusive, so values of 0, 250, 0, 250, 0, 0 indicate that the
       dimensions of the output will be 251 x 251 x 1.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`