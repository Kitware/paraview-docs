paraview.simple.RestartedSimExodusReader
========================================

.. currentmodule:: paraview.simple

.. autofunction:: RestartedSimExodusReader

Data Descriptors
----------------


   
   AnimateVibrations
       If this flag is on and HasModeShapes is also on, then
       this reader will report a continuous time range [0,1] and animate the
       displacements in a periodic sinusoid. If this flag is off and
       HasModeShapes is on, this reader ignores time. This flag has no effect
       if HasModeShapes is off.
   
   ApplyDisplacements
       Geometric locations can include displacements. When this
       option is on, the nodal positions are 'displaced' by the standard
       exodus displacement vector. If displacements are turned 'off', the user
       can explicitly add them by applying a warp filter.
   
   DisplacementMagnitude
       When displacements are being applied, they are scaled by
       this amount. Set to 1 for no scaling.
   
   EdgeBlocks
       Use this property to select which blocks of edges should
       be loaded. All edges in the same block will have the same interpolant
       (linear, quadratic, etc.) and have the same variables defined over
       them.
   
   EdgeMapArrayStatus
       Specify which maps defined over edges in the mesh should
       be loaded. An edge map is a renumbering of all the edges (across all
       the edge blocks of a file) from their offset in the file to some
       arbitrary integers, usually specifying a unique global ID across a set
       of files.
   
   EdgeSetArrayStatus
       An Exodus II file may define subsets of all the edges
       (across all edge blocks) in a file as sets in their own right. This
       property specifies which of those sets should be loaded. Variables,
       such as boundary conditions, may then be defined over these sets by
       specifying a single number per edge. The accompanying
       EdgeSetResultArrayStatus property specifies which variables defined
       over those sets should be loaded.
   
   EdgeSetResultArrayStatus
       An Exodus II file may define subsets of all the edges
       (across all edge blocks) in a file as sets in their own right.
       Variables, such as boundary conditions, may then be defined over these
       sets by specifying a single number per edge. This property specifies
       which of those variables should be loaded. The corresponding set must
       also be loaded using the EdgeSetArrayStatus property in order for the
       variable to appear.
   
   EdgeVariables
       Use this property to select which variables defined over
       edges should be loaded. Edges are oriented boundaries of one or more
       higher-dimensional cells also present in the mesh. Edge variables
       specify a single value per entry in some edge block.
   
   ElementBlocks
       Use this property to select which blocks of elements
       (cells) should be loaded. All elements (cells) in the same block will
       have the same interpolant (tetrahedral, triangular, trilinear
       hexahedral, etc.) and have the same variables defined over
       them.
   
   ElementMapArrayStatus
       Specify which maps defined over elements (cells) in the
       mesh should be loaded. An element map is a renumbering of all the
       elements (across all the element blocks of a file) from their offset in
       the file to some arbitrary integers, usually specifying a unique global
       ID across a set of files. These are sometimes called new-style maps
       because they are specified differently than in older Exodus files,
       which only allowed a single element map.
   
   ElementSetArrayStatus
       An Exodus II file may define subsets of all the elements
       (across all element blocks) in a file as sets in their own right. This
       property specifies which of those sets should be loaded. Variables,
       such as feature classifiers, may then be defined over these sets by
       specifying a single number per element. The accompanying
       ElementSetResultArrayStatus property specifies which variables defined
       over those sets should be loaded.
   
   ElementSetResultArrayStatus
       An Exodus II file may define subsets of all the elements
       (across all element blocks) in a file as sets in their own right.
       Variables, such as feature classifiers, may then be defined over these
       sets by specifying a single number per element. This property specifies
       which of those variables should be loaded. The corresponding set must
       also be loaded using the ElementSetArrayStatus property in order for
       the variable to appear.
   
   ElementVariables
       Use this property to select which variables defined over
       elements (cells) should be loaded. Element variables specify a single
       value per entry in some element block.
   
   FaceBlocks
       Use this property to select which blocks of faces should
       be loaded. All faces in the same block will have the same interpolant
       (triangular, bilinear quadrilateral, etc.) and have the same variables
       defined over them.
   
   FaceMapArrayStatus
       Specify which maps defined over faces in the mesh should
       be loaded. A face map is a renumbering of all the faces (across all the
       face blocks of a file) from their offset in the file to some arbitrary
       integers, usually specifying a unique global ID across a set of
       files.
   
   FaceSetArrayStatus
       An Exodus II file may define subsets of all the faces
       (across all face blocks) in a file as sets in their own right. This
       property specifies which of those sets should be loaded. Variables,
       such as boundary conditions, may then be defined over these sets by
       specifying a single number per face. The accompanying
       FaceSetResultArrayStatus property specifies which variables defined
       over those sets should be loaded.
   
   FaceSetResultArrayStatus
       An Exodus II file may define subsets of all the faces
       (across all face blocks) in a file as sets in their own right.
       Variables, such as boundary conditions, may then be defined over these
       sets by specifying a single number per face. This property specifies
       which of those variables should be loaded. The corresponding set must
       also be loaded using the FaceSetArrayStatus property in order for the
       variable to appear.
   
   FaceVariables
       Use this property to select which variables defined over
       faces should be loaded. Faces are oriented boundaries of one or more
       higher-dimensional cells also present in the mesh. Face variables
       specify a single value per entry in some face block.
   
   FileName
       This points to a special metadata file that lists the
       output files for each restart.
   
   FilePattern
       This property contains a text string specifying the
       pattern used to load files. There are two parts to it: the prefix (%s)
       and the file number (%i). The format used is the same as that used for
       printf.
   
   FilePrefix
       This property specifies the file root used with the file
       pattern to format a file name. (See the File Pattern
       property).
   
   FileRange
       This property controls the indices of the first and last
       files to be read.
   
   GenerateFileIdArray
       Should each cell in the mesh be assigned an integer
       identifying the file it came from? If turned on, a cell variable named
       "FileId" should be present.
   
   GenerateGlobalElementIdArray
       Should the reader retrieve the first new-style element
       map, or if that is not present, the solitary old-style element map
       (which always exists but may be procedurally generated if it is not
       stored with the file)?
   
   GenerateGlobalNodeIdArray
       Should the reader retrieve the first new-style node map,
       or if that is not present, the solitary old-style node map (which
       always exists but may be procedurally generated if it is not stored
       with the file)?
   
   GenerateObjectIdCellArray
       Specifies whether a variable named "ObjectId" should be
       created for each entry of each block and set being loaded and assigned
       the identifying number of the block or set, so that given a cell one
       can readily identify the block or set it came from. This is useful for
       coloring a mesh by block ID or set ID.
   
   GlobalVariables
       Use this property to select which global (i.e.,
       per-mesh) variables should be loaded. Global variables are stored as
       arrays in the field data of the reader's output.
   
   HasModeShapes
       Some simulations overload the Exodus time steps to
       represent mode shapes. In this case, it does not make sense to iterate
       over the "time steps", because they are not meant to be played in
       order. Rather, each represents the vibration at a different "mode."
       Setting the value of this property to 1 changes the semantics of the
       reader to not report the time steps to downstream
       filters.
   
   ModeShape
       Specify which mode shape to animate when HasModeShapes
       is on.
   
   NodeMapArrayStatus
       Specify which maps defined over nodes (points) in the
       mesh should be loaded. A node map is a renumbering of all the points in
       a file from their offset in the file to some arbitrary integers,
       usually specifying a unique global ID across a set of files. These are
       sometimes called new-style maps because they are specified differently
       than in older Exodus files, which only allowed a single node
       map.
   
   NodeSetArrayStatus
       An Exodus II file may define subsets of all the nodes
       (points) in a file as sets in their own right. Variables, such as
       boundary conditions, may then be defined over these sets by specifying
       a single number per node. This property specifies which of those sets
       should be loaded. The accompanying NodeSetResultArrayStatus property
       specifies which variables defined over those sets should be
       loaded.
   
   NodeSetResultArrayStatus
       An Exodus II file may define subsets of all the nodes
       (points) in a file as sets in their own right. Variables, such as
       boundary conditions, may then be defined over these sets by specifying
       a single number per node. This property specifies which of those
       variables should be loaded. The corresponding set must also be loaded
       using the NodeSetArrayStatus property in order for the variable to
       appear.
   
   PointVariables
       Use this property to select which nodal (i.e.,
       per-point) variables should be loaded.
   
   SideSetArrayStatus
       An Exodus II file may define subsets of all the
       of all the elements in a file as sets in their own
       right. This property specifies which of those sets should be loaded.
       Variables, such as boundary conditions, may then be defined over these
       sets by specifying a single number per side. For example, a hexahedron
       has 18 sides: 6 faces and 12 edges. Any of these sides may be
       individually called out in a set and assigned a result value. The
       accompanying SideSetResultArrayStatus property specifies which
       variables defined over those sets should be loaded.
   
   SideSetResultArrayStatus
       An Exodus II file may define subsets of all the
       of all the elements in a file as sets in their own
       right. Variables, such as boundary conditions, may then be defined over
       these sets by specifying a single number per side. For example, a
       hexahedron has 18 sides: 6 faces and 12 edges. Any of these sides may
       be individually called out in a set and assigned a result value. This
       property specifies which of those variables should be loaded. The
       corresponding set must also be loaded using the SideSetArrayStatus
       property in order for the variable to appear.
   
   TimestepValues
   
   UseLegacyBlockNamesWithElementTypes
       In previous versions, the reader added the type of elements in the block to
       the block name when no name was provided for the block. This has issues
       with consistency when naming blocks across ranks for partitioned files.
       Hence we no longer do that. For legacy pipelines, one can enable
       the old behavior by setting this flag to true.
   
   UseMetaFile
       This hidden property must always be set to 1 for this
       proxy to work.
   
   XMLFileName
       This property specifies the name of an XML file
       containing part and material descriptions and a mapping to element
       blocks.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`