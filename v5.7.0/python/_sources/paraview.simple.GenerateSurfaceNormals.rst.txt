paraview.simple.GenerateSurfaceNormals
======================================

.. currentmodule:: paraview.simple

.. autofunction:: GenerateSurfaceNormals

Data Descriptors
----------------


   
   ComputeCellNormals
       This filter computes the normals at the points in the
       data set. In the process of doing this it computes polygon normals too.
       If you want these normals to be passed to the output of this filter,
       set the value of this property to 1.
   
   Consistency
       The value of this property controls whether consistent
       polygon ordering is enforced. Generally the normals for a data set
       should either all point inward or all point outward. If the value of
       this property is 1, then this filter will reorder the points of cells
       that whose normal vectors are oriented the opposite direction from the
       rest of those in the data set.
   
   FeatureAngle
       The value of this property defines a feature edge. If
       the surface normal between two adjacent triangles is at least as large
       as this Feature Angle, a feature edge exists. If Splitting is on,
       points are duplicated along these feature edges. (See the Splitting
       property.)
   
   FlipNormals
       If the value of this property is 1, this filter will
       reverse the normal direction (and reorder the points accordingly) for
       all polygons in the data set; this changes front-facing polygons to
       back-facing ones, and vice versa. You might want to do this if your
       viewing position will be inside the data set instead of outside of
       it.
   
   Input
       This property specifies the input to the Normals
       Generation filter.
   
   NonManifoldTraversal
       Turn on/off traversal across non-manifold edges. Not
       traversing non-manifold edges will prevent problems where the
       consistency of polygonal ordering is corrupted due to topological
       loops.
   
   PieceInvariant
       Turn this option to to produce the same results
       regardless of the number of processors used (i.e., avoid seams along
       processor boundaries). Turn this off if you do want to process ghost
       levels and do not mind seams.
   
   Splitting
       This property controls the splitting of sharp edges. If
       sharp edges are split (property value = 1), then points are duplicated
       along these edges, and separate normals are computed for both sets of
       points to give crisp (rendered) surface definition.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`