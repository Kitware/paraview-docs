paraview.simple.GlyphWithCustomSourceLegacy
===========================================

.. currentmodule:: paraview.simple

.. autofunction:: GlyphWithCustomSourceLegacy

Data Descriptors
----------------


   
   GlyphMode
       This property indicates the mode that will be used to generate
       glyphs from the dataset.
   
   GlyphTransform
       The values in this property allow you to specify the
       transform (translation, rotation, and scaling) to apply to the glyph
       source.
   
   GlyphType
       This property determines which type of glyph will be
       placed at the points in the input dataset.
   
   Input
       This property specifies the input to the Glyph filter.
       This is the dataset from which the points are selected to be glyphed.
   
   MaximumNumberOfSamplePoints
       This property specifies the maximum number of sample points to use
       when sampling the space when Uniform Spatial Distribution is used.
   
   Orient
       If this property is set to 1, the glyphs will be
       oriented based on the vectors selected using the "Vectors" property.
   
   Scalars
       Select the input array to be treated as the active "Scalars".
       You can scale the glyphs using the selected scalars by setting the
       "Scale Mode" property to "scalar"
   
   ScaleFactor
       Specify the constant multiplier to use to scale the glyphs.
   
   ScaleMode
       Select how to scale the glyphs. Set to "off" to disable
       scaling entirely. Set to "scalar" to scale the glyphs using the
       array selected using the "Scalars" property. Set to "vector" to scale the
       glyphs using the magnitude of the array selected using the "Vectors" property.
       Set to "vector_components" to scale using the "Vectors", scaling each component
       individually.
   
   Seed
       This property specifies the seed that will be used for generating
       a uniform distribution of glyph points when a Uniform Spatial
       Distribution is used.
   
   Stride
       This property specifies the stride that will be used when glyphing
       by Every Nth Point.
   
   Vectors
       Select the input array to be treated as the active "Vectors".
       You can scale the glyphs using the selected vectors by setting the "Scale Mode"
       property to "vector" or "vector_components". You can orient the glyphs using the
       selected vectors by checking the "Orient" property.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`