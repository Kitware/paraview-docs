paraview.simple.TemporalShiftScale
==================================

.. currentmodule:: paraview.simple

.. autofunction:: TemporalShiftScale

Data Descriptors
----------------


   
   Input
       The input to the Temporal Shift Scale
       filter.
   
   MaximumNumberOfPeriods
       If Periodic time is enabled, this controls how many time
       periods time is reported for. A filter cannot output an infinite number
       of time steps and therefore a finite number of periods is generated
       when reporting time.
   
   Periodic
       If Periodic is true, requests for time will be wrapped
       around so that the source appears to be a periodic time source. If data
       exists for times {0,N-1}, setting periodic to true will cause time 0 to
       be produced when time N, 2N, 2N etc is requested. This effectively
       gives the source the ability to generate time data indefinitely in a
       loop. When combined with Shift/Scale, the time becomes periodic in the
       shifted and scaled time frame of reference. Note: Since the input time
       may not start at zero, the wrapping of time from the end of one period
       to the start of the next, will subtract the initial time - a source
       with T{5..6} repeated periodically will have output time {5..6..7..8}
       etc.
   
   PeriodicEndCorrection
       If Periodic time is enabled, this flag determines if the
       last time step is the same as the first. If PeriodicEndCorrection is
       true, then it is assumed that the input data goes from 0-1 (or whatever
       scaled/shifted actual time) and time 1 is the same as time 0 so that
       steps will be 0,1,2,3...N,1,2,3...N,1,2,3 where step N is the same as 0
       and step 0 is not repeated. When this flag is false the data is assumed
       to be literal and output is of the form 0,1,2,3...N,0,1,2,3... By
       default this flag is ON
   
   PostShift
       The amount of time the input is shifted.
   
   PreShift
       Apply a translation to the data before scaling. To
       convert T{5,100} to T{0,1} use Preshift=-5, Scale=1/95, PostShift=0 To
       convert T{5,105} to T{5,10} use Preshift=-5, Scale=5/100,
       PostShift=5
   
   Scale
       The factor by which the input time is
       scaled.
   
   TimestepValues
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`