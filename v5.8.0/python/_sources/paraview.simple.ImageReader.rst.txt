paraview.simple.ImageReader
===========================

.. currentmodule:: paraview.simple

.. autofunction:: ImageReader

Data Descriptors
----------------


   
   DataByteOrder
       This property indicates the byte order of the binary
       file(s).
   
   DataExtent
       This property specifies the minimum and maximum index
       values of the data in each dimension (xmin, xmax, ymin, ymax, zmin,
       zmax).
   
   DataOrigin
       The coordinate contained in this property specifies the
       position of the point with index (0,0,0).
   
   DataScalarType
       The value of this property indicates the scalar type of
       the pixels/voxels in the file(s): short, int, float ...
   
   DataSpacing
       This property specifies the size of a voxel in each
       dimension.
   
   FileDimensionality
       This property indicates whether the file(s) in this
       dataset contain slices (2D) or volumes (3D).
   
   FileLowerLeft
       This property determines whether the data originates in
       the lower left corner (on) or the upper left corner (off). Most
       scientific data is written with a right-handed axes that originates in
       the lower left corner. However, several 2D image file formats write the
       image from the upper left corner.
   
   FileNames
       The list of files to be read by the reader. If more than
       one file is specified, the reader will switch to file series mode in
       which it will pretend that it can support time and provide one file per
       time step.
   
   NumberOfScalarComponents
       This property specifies the number of components the
       scalar value at each pixel or voxel has (e.g., RGB - 3 scalar
       components).
   
   ReadAsImageStack
       When set, the reader will read the set of files as an image stack, rather than
       a temporal file series.
   
   ScalarArrayName
       This property contains a text string listing a name to
       assign to the point-centered data array read.
   
   TimestepValues
       Available timestep values.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`