paraview.simple.TemporalParticlesToPathlines
============================================

.. currentmodule:: paraview.simple

.. autofunction:: TemporalParticlesToPathlines

Data Descriptors
----------------


   
   IdChannelArray
       Specify the name of a scalar array which will be used to fetch
       the index of each point. This is necessary only if the particles
       change position (Id order) on each time step. The Id can be used
       to identify particles at each step and hence track them properly.
       If this array is set to "Global or Local IDs", the global point
       ids are used if they exist or the point index is otherwise.
   
   Input
       The input cells to create pathlines for.
   
   MaskPoints
       Set the number of particles to track as a ratio of the input.
       Example: setting MaskPoints to 10 will track every 10th point.
   
   MaxStepDistance
       If a particle disappears from one end of a simulation and
       reappears on the other side, the track left will be
       unrepresentative.  Set a MaxStepDistance{x,y,z} which acts as a
       threshold above which if a step occurs larger than the value (for
       the dimension), the track will be dropped and restarted after the
       step. (ie the part before the wrap around will be dropped and the
       newer part kept).
   
   MaxTrackLength
       If the Particles being traced animate for a long time, the trails
       or traces will become long and stringy. Setting the
       MaxTraceTimeLength will limit how much of the trace is
       displayed. Tracks longer then the Max will disappear and the
       trace will appear like a snake of fixed length which progresses
       as the particle moves.  This length is given with respect to
       timesteps.
   
   Selection
       Set a second input, which is a selection. Particles with the same
       Id in the selection as the primary input will be chosen for
       pathlines Note that you must have the same IdChannelArray in the
       selection as the input
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`