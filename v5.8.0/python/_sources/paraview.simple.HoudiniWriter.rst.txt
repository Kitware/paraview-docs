paraview.simple.HoudiniWriter
=============================

.. currentmodule:: paraview.simple

.. autofunction:: HoudiniWriter

Data Descriptors
----------------


   
   CellDataArrays
       Select the cell data arrays to pass through
   
   ChooseArraysToWrite
       Explicitly choose which arrays to write.
   
   EdgeDataArrays
       Select the edge data arrays to pass through
   
   FieldDataArrays
       Select the field data arrays to pass through
   
   FileName
       The name of the file to be written.
   
   Filenamesuffix
       The suffix to append to the file name when writing files at different timesteps.
       (File extensions such as .vtk should be excluded.)
       The % format specifiers are used. For example, _%d will write files as FileName_0,
       FileName_1, FileName_2, etc., and _%.3d will write files as FileName_000,
       FileName_001, FileName_002 etc.
   
   Input
       The input filter/source whose output dataset is to
       written to the file.
   
   NumberOfIORanks
       In parallel runs, this writer can consolidate output from multiple ranks to
       a subset of ranks. This specifies the number of ranks that will do the final writing
       to disk. If \*\*NumberOfIORanks\*\* is 0, then all ranks will save the local data.
       If set to 1 (default), the root node alone will write to disk. All data from all ranks will
       be gathered to the root node before being written out.
   
   PointDataArrays
       Select the point data arrays to pass through
   
   RankAssignmentMode
       When \*\*NumberOfIORanks\*\* is greater than 1 and less than the number of MPI ranks,
       this controls how the ranks that write to disk are determined. This also affects which
       ranks send data to which rank for IO.
       
       In \*\*Contiguous\*\* mode (default), all MPI ranks are numerically grouped into \*\*NumberOfIORanks\*\*
       groups with the first rank in each group acting as the `root` node for that group and is the one that
       does IO. For example, if there are 16 MPI ranks and NumberOfIORanks is set to 3 then the groups are
       `[0 - 5], [6 - 10], [11 - 15]` with the first rank in each group 0, 6, and 15 doing the IO.
       
       In \*\*RoundRobin\*\* mode, the grouping is done in round robin fashion, thus for 16 MPI
       ranks with NumberOfIORanks set to 3, the groups are
       `[0, 3, ..., 15], [1, 4, ..., 13], [2, 5, ..., 14]` with 0, 1 and 2 doing the IO.
   
   RowDataArrays
       Select the row data arrays to pass through
   
   VertexDataArrays
       Select the vertex data arrays to pass through
   
   WriteTimeSteps
       When WriteTimeSteps is turned ON, the writer is
       executed once for each timestep available from its input.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`