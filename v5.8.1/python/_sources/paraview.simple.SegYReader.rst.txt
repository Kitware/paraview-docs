paraview.simple.SegYReader
==========================

.. currentmodule:: paraview.simple

.. autofunction:: SegYReader

Data Descriptors
----------------


   
   FileName
       This property specifies the file name for the
       SEG-Y reader.
   
   Force2D
       Specify if we create a Structured Grid even when the data is
       SEG-Y 3D. Note this consumes more memory but it shows the
       precise location for each point and the correct shape of the
       data. The default value is true. If we set this option to
       false we create an Image Data for a SEG-Y 3D dataset.
       Specify if we should we force the data to be interpreted as a 2D dataset.
       It may be a 2D sheet through 3D space. When this is turned on we ignore the cross
       line and line values and instead build a 2D data by processing and
       connecting the traces in order from first to last. The output will be a
       Structured Grid.
   
   StructuredGrid
       Specify if we create a Structured Grid even when the data is
       SEG-Y 3D. Note this consumes more memory but it shows the
       precise location for each point and the correct shape of the
       data. The default value is true. If we set this option to
       false we create an Image Data for a SEG-Y 3D dataset.
   
   VerticalCRS
       Specify whether the vertical coordinates in the SEG-Y file are heights
       (positive up) or depths (positive down). By default, the vertical
       coordinates are treated as heights (i.e. positive up). This means that the
       Z-axis of the dataset goes from 0 (surface) to -ve depth (last sample).
       Note. As per the SEG-Y rev 2.0 specification, this information is defined
       in the Location Data Stanza of the Extended Textual Header. However, as of
       this revision, SegYReader does not support reading the extended
       textual header.
   
   XCoordByte
       Specify X and Y byte positions for custom XYCoordinateMode.
       By default, XCoordByte = 73, YCoordByte = 77 i.e. source xy.
   
   XYCoordMode
       Specify whether to use source x/y coordinates or CDP coordinates or custom
       byte positions for data position in the SEG-Y trace header. Defaults to
       source x/y coordinates.
       
       As per SEG-Y rev 2.0 specification:
       
       - Source XY coordinate bytes = (73, 77)
       - CDP XY coordinate bytes = (181, 185)
   
   YCoordByte
       Specify X and Y byte positions for custom XYCoordinateMode.
       By default, XCoordByte = 73, YCoordByte = 77 i.e. source xy.
   
   

Data Descriptors inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   CellData
       Returns cell data information
   
   FieldData
       Returns field data information
   
   PointData
       Returns point data information
   
   

Data Descriptors inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   __dict__
       dictionary for instance variables (if defined)
   
   __weakref__
       list of weak references to the object (if defined)
   

Methods
-------


   
   Initialize = aInitialize(self, connection=None, update=True)
   
   

Methods inherited from SourceProxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   FileNameChanged(self)
       Called when the filename of a source proxy is changed.
   
   GetCellDataInformation(self)
       Returns the associated cell data information.
   
   GetDataInformation(self, idx=None)
       This method returns a DataInformation wrapper around a
       vtkPVDataInformation
   
   GetFieldDataInformation(self)
       Returns the associated cell data information.
   
   GetPointDataInformation(self)
       Returns the associated point data information.
   
   UpdatePipeline(self, time=None)
       This method updates the server-side VTK pipeline and the associated
       data information. Make sure to update a source to validate the output
       meta-data.
   
   UpdatePipelineInformation(self)
       This method updates the meta-data of the server-side VTK pipeline and
       the associated information properties
   
   __getitem__(self, idx)
       Given a slice, int or string, returns the corresponding
       output port
   
   

Methods inherited from Proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


   
   GetProperty(self, name)
       Given a property name, returns the property object.
   
   GetPropertyValue(self, name)
       Returns a scalar for properties with 1 elements, the property
       itself for vectors.
   
   InitializeFromProxy(self, aProxy, update=True)
       Constructor. Assigns proxy to self.SMProxy, updates the server
       object as well as register the proxy in _pyproxies dictionary.
   
   ListProperties(self)
       Returns a list of all property names on this proxy.
   
   SetPropertyWithName(self, pname, arg)
       Generic method for setting the value of a property.
   
   __del__(self)
       Destructor. Cleans up all observers as well as remove
       the proxy from the _pyproxies dictionary
   
   __eq__(self, other)
       Returns true if the underlying SMProxies are the same.
   
   __getattr__(self, name)
       With the exception of a few overloaded methods,
       returns the SMProxy method
   
   __hash__(self)
       Return hash(self).
   
   __init__(self, \*\*args)
       Default constructor. It can be used to initialize properties
       by passing keyword arguments where the key is the name of the
       property. In addition registrationGroup and registrationName (optional)
       can be specified (as keyword arguments) to automatically register
       the proxy with the proxy manager.
   
   __iter__(self)
       Creates an iterator for the properties.
   
   __ne__(self, other)
       Returns false if the underlying SMProxies are the same.
   
   __setattr__(self, name, value)
       Implement setattr(self, name, value).
   
   add_attribute(self, name, value)
   
   



For the full list of servermanager proxies, please refer to :doc:`Available readers, sources, writers, filters and animation cues <paraview.servermanager_proxies>`